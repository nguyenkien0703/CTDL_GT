0(logn)
1: tất cả các node thuộc cây con bên trái phải nhỏ hơn node gốc
2: tất cả các node thuộc cây con bên phải phải lớn hơn node gốc
3: cây con bên trái,phải cũng phải là cây nhị phân tìm kiếm
search ,insert,delete
21:50
//cachs chèn 1 node vào cay nhị phân tìm kiế,
// ham nay se tra ve 1 node, mục dích là để ko thay đổi thứ tự cây nhị phân của mình
//xet toi node thu i va ta can chen node co gia tri la x

node* insert(Node *root,int x){
	// đến con la node lá rồi thì tạo cái node mới, đây là điều kiện dừng, tùhy vào x mà dc gán bên trái hay phải
	
	if(root==NULL) 
		
		return new Node(x);	
	if(x< root->left){
		root->left=insert(root->left,x);
	}else {
		root->right=insert(root->right,x);
	}
	// tra ve 1 he thong cay hoan chinh
	return root;
}

===========cách xóa node 1:06:35======
#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pii pair<ll, ll> 
#define vii vector<pii> 
#define pb push_back 
#define fi first 
#define el cout<<endl
#define se second 
#define in(a) cin>>  a;
#define out(a) cout<<  a;
#define all(x) (x).begin(), (x).end()
#define rep(a) for(int i = 0; i < (a); i++)
#define vll vector<ll> 
#define vi vector<int >
#define ms(a,n) memset(a,n,sizeof(a))
#define FOR(i,a,b) for(int i=a;i<=b;i++)
#define FOD(i,b,a) for(int i=b;i>=a;i--)
#define faster ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
const ll MOD = 1e9 + 7;

struct node{
    int val ;
    node *left, *right;
    node (int x ){
        val=x;
        left=NULL;
        right=NULL;
    }
};

void makeRoot(node *root, int u , int v , char c ){
    if(c=='L') root->left=new node(v);
    else {
        root->right=new node(v);
    }
}
// chen 1 node khi nhap danh sach
void insertNode(node *root, int u , int v ,char c){
    if(root==NULL) return;
    if(root->val ==u){
        makeRoot(root,u,v,c);
    }else {
        insertNode(root->left,u,v,c);
        insertNode(root->right,u,v,c);
    }

}
//chen 1 node moi hoan toan vao danh sach
node *insert(node *root,int x){
    if(root==NULL){
        return new node(x);
    }
    if(x< root->val){
        root-left=insert(root->left,x);
    }else {
        root->right=insert(root->right,x);
    }
    return root;
}
// tra ve node min nhat ben phai cua cay
node *FinfMind(node *root){
    node * tmp=root;
    while(tmp!=NULL && tmp->left!=NULL){
        tmp = tmp->left;
    }
    return tmp;
}
// xoa 1 node trong cay nhi phan tim kiem 
node* deleteNode(node *root,int x ){
    if(root=NULL) return NULL;
    if(root->right==NULL && root->left==NULL){
        return NULL;
    }
    if(root->left==NULL || root->right==NULL){
        if(root->left==NULL){
            // chi co con ben phai
            node *tmp=root->right;
            delete root;
            return tmp;
        }else {
            node * tmp = root->left;
            delete root;
            return tmp;
        }
    }else {
        node *tmp=FinfMind(root->right);
        root->val = tmp->val;
        root->right=deleteNode(root->right,tmp->val);

    }
    return root;
}






int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif 
    faster;
   int t ;
   cin>> t;
   whilr(t--){
    solve();
   }


}
