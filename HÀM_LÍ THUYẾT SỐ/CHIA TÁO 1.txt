Có n quả táo và m cái hộp, Andrew2804 muốn tìm số cách chia n quả táo này vào m hộp sao cho hộp nào cũng có ít nhất 1 quả táo. Bạn hãy giúp anh ta nhé.

Input Format

2 số nguyên n, m

Constraints

1 ≤ m ≤ n ≤ 1000

Output Format

Kết quả của bài toán lấy dư với 1000000007 (1e9 + 7)

Sample Input 0

6 3
Sample Output 0

10
Explanation 0

Có 10 cách cách chia như sau (2, 2, 2) (1, 1, 4) (1, 4, 1) (4, 1, 1) (1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1)


//idea : lẩy tổ hợp chập(k-1) cảu (n-1)
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef unsigned long long ull;

#define X first
#define Y second
#define pb push_back
#define mp make_pair
#define ep emplace_back
#define EL printf("\n")
#define sz(A) (int)A.size()
#define FOR(i, l, r) for (int i = l; i <= r; i++)
#define FOD(i, r, l) for (int i = r; i >= l; i--)
#define fillchar(a, x) memset(a, x, sizeof(a))
 
const int MOD = 1e9 + 7;
ll gcd(ll a , ll b){ if(b == 0) return a ; return gcd(b , a%b);}
ll lcm(ll a , ll b){ return a / gcd(a,b) * b;}
ll powMod(ll a , ll b , ll m)
{
    ll res = 1;
    a %= m;
    while(b)
    {
        if(b % 2 == 1)
        {
            res *= a;
            res %= m;
        }
        a *= a;
        a %= m;
        b /= 2;
    }
    return res;
}
ll dao(ll a , ll m)
{
    return powMod(a , m - 2 , m);
}
ll X[1000001];
void gt()
{
    X[0] = 1;
    for(int i = 1 ; i <= 1000000 ; i++)
    {
          X[i] = i * X[i - 1];
           X[i] %= MOD;
      }
}
int main()
{
    ios::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
    
    gt();
    
    
        ll n , k ; cin >> n >> k;
        cout << X[n-1] % MOD * dao(X[k-1] * X[n - k] % MOD , MOD) % MOD << endl;
    
    return 0;
}